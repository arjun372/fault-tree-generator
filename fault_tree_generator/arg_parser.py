import argparse


class FaultTreeGeneratorArgParser(argparse.ArgumentParser):

    def __init__(self, description="Fault-Tree Generator", formatter_class=argparse.ArgumentDefaultsHelpFormatter, **kwargs):
        super().__init__(description=description, formatter_class=formatter_class, **kwargs)
        self.add_arguments()

    def add_arguments(self):
        self.add_argument("--ft-name",
                          type=str,
                          help="name for the fault tree",
                          metavar="NCNAME",
                          default="Autogenerated")
        self.add_argument("--root",
                          type=str,
                          help="name for the root gate",
                          default="root",
                          metavar="NCNAME")
        self.add_argument("--seed",
                          type=int,
                          default=123,
                          metavar="int",
                          help="seed for the PRNG")
        self.add_argument("-b",
                          "--num-basic",
                          type=int,
                          help="# of basic events",
                          default=100,
                          metavar="int")
        self.add_argument("-a",
                          "--num-args",
                          type=float,
                          default=3.0,
                          help="avg. # of gate arguments",
                          metavar="float")
        self.add_argument("--weights-g",
                          type=str,
                          nargs="+",
                          metavar="float",
                          help="weights for [AND, OR, K/N, NOT, XOR] gates",
                          default=[1, 1, 0, 0, 0])
        self.add_argument("--common-b",
                          type=float,
                          default=0.1,
                          metavar="float",
                          help="avg. %% of common basic events per gate")
        self.add_argument("--common-g",
                          type=float,
                          default=0.1,
                          metavar="float",
                          help="avg. %% of common gates per gate")
        self.add_argument("--parents-b",
                          type=float,
                          default=2,
                          metavar="float",
                          help="avg. # of parents for common basic events")
        self.add_argument("--parents-g",
                          type=float,
                          default=2,
                          metavar="float",
                          help="avg. # of parents for common gates")
        self.add_argument("-g",
                          "--num-gate",
                          type=int,
                          default=0,
                          metavar="int",
                          help="# of gates (discards parents-b/g and common-b/g)")
        self.add_argument("--max-prob",
                          type=float,
                          default=0.1,
                          metavar="float",
                          help="maximum probability for basic events")
        self.add_argument("--min-prob",
                          type=float,
                          default=0.01,
                          metavar="float",
                          help="minimum probability for basic events")
        self.add_argument("--num-house",
                          type=int,
                          help="# of house events",
                          default=0,
                          metavar="int")
        self.add_argument("--num-ccf",
                          type=int,
                          help="# of ccf groups",
                          default=0,
                          metavar="int")
        self.add_argument("-o",
                          "--out",
                          type=str,
                          metavar="path",
                          help="a file to write the fault tree")
        self.add_argument("--nest",
                          action="store_true",
                          help="nest NOT connectives in Boolean formulae")
